version: 2.1

orbs:
  prodsec: snyk/prodsec-orb@1.0

jobs:
  test:
    docker:
      - image: circleci/node:lts
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Build
          command: |
            npm run build:clean
      - run:
          name: Checks
          command: |
            npm run test:checks
      - run:
          name: Snyk Test
          command: |
            npm run test:snyk
      - run:
          name: Unit Tests
          command: |
            npm run test:unit

  deploy_dev:
    docker:
      - image: circleci/node:lts
        environment:
          DEV_AZ_EXTENSION_ID: 'dev-security-scan-test'
          DEV_AZ_EXTENSION_NAME: 'Dev - Snyk Security Scan'
          DEV_AZ_TASK_FRIENDLY_NAME: 'Dev - Snyk Security Scan'
          DEV_AZ_TASK_NAME: 'DevSnykSecurityScan'

    working_directory: ~/repo
    steps:
      - checkout

      - run:
          name: Show Node Environment
          command: |
            node --version
            npm --version

      - run:
          name: Run Build
          command: |
            npm run build:clean

      - run:
          name: Build and Deploy to Test Environment
          command: |
            echo DEV_AZ_ORG: $DEV_AZ_ORG  # Set in CCI Project Settings
            echo DEV_AZ_PUBLISHER: $DEV_AZ_PUBLISHER  # Set in CCI Project Settings

            echo DEV_AZ_EXTENSION_ID: $DEV_AZ_EXTENSION_ID
            echo DEV_AZ_EXTENSION_NAME: $DEV_AZ_EXTENSION_NAME
            echo DEV_AZ_TASK_FRIENDLY_NAME: $DEV_AZ_TASK_FRIENDLY_NAME
            echo DEV_AZ_TASK_NAME: $DEV_AZ_TASK_NAME

            npm run deploy:compile
            NEXT_DEV_VERSION=$(node ./ops/deploy/dist/get-next-dev-ext-version.js)
            if [[ $? -eq 0 ]]; then
              echo NEXT_DEV_VERSION: $NEXT_DEV_VERSION
            else
              echo "no current version. Setting NEXT_DEV_VERSION to 0.0.1"
              NEXT_DEV_VERSION=0.0.1
            fi

            echo "Deploying to dev with ${NEXT_DEV_VERSION} ${AZ_ORG}"
            scripts/ci-deploy.sh $NEXT_DEV_VERSION $DEV_AZ_ORG

      - run:
          name: Create renamed copy of the vsix bundle
          command: |
            cp *.vsix dev-extension-artifact.vsix
            ls -la dev-extension-artifact.vsix

      - store_artifacts:
          path: ./dev-extension-artifact.vsix

      - run:
          name: Launch Test Pipelines
          command: |
            node ./ops/deploy/dist/run-test-pipelines.js

  deploy_prod:
    docker:
      - image: circleci/node:lts
        environment:
          AZ_EXTENSION_ID: 'snyk-security-scan'
          AZ_EXTENSION_NAME: 'Snyk Security Scan'
          AZ_PUBLISHER: 'Snyk'

    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Setup Env Vars
          command: |
            export AZURE_DEVOPS_EXT_PAT=$PROD_AZURE_DEVOPS_EXT_PAT
            echo AZ_EXTENSION_ID: $AZ_EXTENSION_ID
            echo AZ_EXTENSION_NAME: $AZ_EXTENSION_NAME
            echo AZ_PUBLISHER: $AZ_PUBLISHER

      - run:
          name: Build
          command: |
            npm run build:clean

      - run:
          name: Create Extension
          command: |
            export AZURE_DEVOPS_EXT_PAT=$PROD_AZURE_DEVOPS_EXT_PAT
            npx semantic-release

      - run:
          name: Create renamed copy of the vsix bundle
          command: |
            if ls *.vsix 1>/dev/null 2>&1; then
              cp *.vsix prod-extension-artifact.vsix
              ls -la prod-extension-artifact.vsix
            else
              echo "No .vsix files found to copy."
            fi

      - store_artifacts:
          path: ./prod-extension-artifact.vsix

workflows:
  version: 2
  build_and_test:
    jobs:
      - prodsec/secrets-scan:
          name: Scan repository for secrets
          context:
            - snyk-bot-slack
          channel: hammerhead-alerts
      - test
      - deploy_dev:
          requires:
            - test
          filters:
            branches:
              ignore: master
      - deploy_prod:
          context: team-hammerhead-common-deploy-tokens
          requires:
            - test
          filters:
            branches:
              only: master
